# Scheduled Trigger to check Controller service sanity on develop branch
name: Develop Sanity - Controller

on:
  schedule:
    - cron:  '0 23 * * *'
  workflow_dispatch:

defaults:
  run:
    working-directory: microservices/controller

jobs:
  build_test_controller:
    runs-on: ubuntu-20.04
    env:
      IMAGE: controller
      WORKING_DIR: microservices/controller
      TAG_PREFIX: CTLR_DEV_v
    steps:
      # Checkout source code
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Retrieve latest tag
      - name: Retrieve latest tag
        id: latest_tag
        run: echo "::set-output name=tag::$(git describe --tags --abbrev=0 --match ${{ env.TAG_PREFIX }}*)"

      # Retrieve latest tag SHA
      - name: Retrieve latest tag SHA
        id: latest_tag_sha
        run: |
          echo ${{ steps.latest_tag.outputs.tag }}
          echo "::set-output name=sha::$(git rev-list -n 1 ${{ steps.latest_tag.outputs.tag }})"
      # Get changed files
      - name: Get changed files
        id: changed_files
        uses: tj-actions/changed-files@v13.1
        with:
          sha: ${{ steps.latest_tag_sha.outputs.sha }}
          files: |
            microservices/controller/*
            common/libs/**
      # Get changed files length
      - name: Get changed files length
        id: get_changed_files_length
        env:
          changed_files: ${{ toJson(steps.changed-files-for-dir1.outputs.all_changed_and_modified_files) }}          
        run: |
          echo "$changed_files"
          LL=$(echo $changed_files | jq '. | length')
          echo "::set-output name=changed_files_length::$LL"
      # Cancel the workflow if there is no changes in this microservice
      - name: Cancel the workflow if there is no changes in this microservice
        uses: andymckay/cancel-action@0.2
        if: steps.get-files-length.outputs.changed_files_length == 0

      # Set up JDK 8
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      # Validate Gradle wrapper
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      # Build with Gradle
      - name: Build with Gradle
        run: ./gradlew build -x test

      # Run unit tests
      - name: Run unit tests
        run: ./gradlew test

      # Upload unit test results
      - name: Upload unit test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: unit-test-results
          path: '**/${{ env.WORKING_DIR }}/build/test-results/test/TEST-*.xml'

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      # Docker Login
      - name: Docker Login
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ secrets.DTR_NAME }}
          username: ${{ secrets.DTR_USER }}
          password: ${{ secrets.DTR_PASSWORD }}
        
      # Build Docker image
      - name: Build Docker image
        run: |
          docker build . --file Dockerfile --tag ${{ env.IMAGE }}
      
      # Run Docker container
      - name: Run Docker container
        run: docker run -d --name ${{ env.IMAGE }} -p 8080:8080 ${{ env.IMAGE }}

      # Run health checks
      - name: Run health checks
        run: |
          sleep 10
          ./gradlew healthchecks
      
      # Upload health checks results
      - name: Upload health checks results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: health-checks-results
          path: '**/${{ env.WORKING_DIR }}/build/test-results/healthchecks/TEST-*.xml'

      # Run BVTs
      - name: Run BVTs
        run: ./gradlew bvts

      # Bump version and push tag
      - name: Bump version and push tag
        if: success()
        id: bump_tag
        uses: mathieudutour/github-tag-action@v6.0
        env:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_prefix: ${{ env.TAG_PREFIX }}

      # Upload BVTs results
      - name: Upload BVTs results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: bvts-results
          path: '**/build/test-results/bvts/TEST-*.xml'

      # Push develop-stable Docker image
      - name: Push develop-stable Docker image
        if: success()
        run: |
          docker tag ${{ env.IMAGE }} ${{ secrets.DTR_NAME }}/${{ secrets.DTR_ORG }}/${{ secrets.CONTROLLER_REPO }}:dstable
          docker tag ${{ env.IMAGE }} ${{ secrets.DTR_NAME }}/${{ secrets.DTR_ORG }}/${{ secrets.CONTROLLER_REPO }}:${{ steps.bump_tag.outputs.new_version }}
          docker push ${{ secrets.DTR_NAME }}/${{ secrets.DTR_ORG }}/${{ secrets.CONTROLLER_REPO }}:dstable
          docker push ${{ secrets.DTR_NAME }}/${{ secrets.DTR_ORG }}/${{ secrets.CONTROLLER_REPO }}:${{ steps.bump_tag.outputs.new_version }}
      # Cleanup Docker resources
      - name: Cleanup Docker resources
        if: always()
        run: |
          docker rm --force ${{ env.IMAGE }}
          docker rmi ${{ env.IMAGE }}
          docker rmi ${{ secrets.DTR_NAME }}/${{ secrets.DTR_ORG }}/${{ secrets.CONTROLLER_REPO }}:dstable
          docker rmi ${{ secrets.DTR_NAME }}/${{ secrets.DTR_ORG }}/${{ secrets.CONTROLLER_REPO }}:${{ steps.bump_tag.outputs.new_version }}
